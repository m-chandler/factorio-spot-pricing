AWSTemplateFormatVersion: "2010-09-09"
Description: Factorio Spot Price Servers () via Docker / ECS
Parameters:

  ECSAMI:
    Description: AWS ECS AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

  FactorioImageTag:
    Type: String
    Description: "(Examples include latest, stable, 0.17, 0.17.33) Refer to tag descriptions available here: https://hub.docker.com/r/factoriotools/factorio/)"
    Default: latest

  InstanceType:
    Type: String
    Description: "m6a.large is a good cost effective instance, 2 VCPU and 8 GB of RAM with moderate network performance. Change at your discretion. https://aws.amazon.com/ec2/instance-types/."
    Default: m6a.large

  SpotPrice:
    Type: String
    Description: "An m3.medium shouldn't cost more than a cent per hour. Note: Leave this blank to use on-demand pricing."
    Default: "0.05"

  KeyPairName:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  YourIp:
    Type: String
    Description: (Optional - An empty value disables this feature)
    Default: ''

  HostedZoneId:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance starts, supply the hosted zone ID here.
    Default: ''

  EnableRcon:
    Type: String
    Description: Refer to https://hub.docker.com/r/factoriotools/factorio/ for further RCON configuration details. This parameter simply opens / closes the port on the security group.
    Default: false
    AllowedValues:
    - true
    - false

  UpdateModsOnStart:
    Type: String
    Description: Refer to https://hub.docker.com/r/factoriotools/factorio/ for further configuration details.
    Default: false
    AllowedValues:
    - true
    - false

  # ====================================================
  # 1 - Server Specific Variables
  # ====================================================

  ServerState1:
    Type: String
    Description: "Running: A spot instance for Server 1 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName1:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 1 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 2 - Server Specific Variables
  # ====================================================

  ServerState2:
    Type: String
    Description: "Running: A spot instance for Server 2 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName2:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 2 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 3 - Server Specific Variables
  # ====================================================

  ServerState3:
    Type: String
    Description: "Running: A spot instance for Server 3 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName3:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 3 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 4 - Server Specific Variables
  # ====================================================

  ServerState4:
    Type: String
    Description: "Running: A spot instance for Server 4 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName4:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 4 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 5 - Server Specific Variables
  # ====================================================

  ServerState5:
    Type: String
    Description: "Running: A spot instance for Server 5 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName5:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 5 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 6 - Server Specific Variables
  # ====================================================

  ServerState6:
    Type: String
    Description: "Running: A spot instance for Server 6 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName6:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 6 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 7 - Server Specific Variables
  # ====================================================

  ServerState7:
    Type: String
    Description: "Running: A spot instance for Server 7 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName7:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 7 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 8 - Server Specific Variables
  # ====================================================

  ServerState8:
    Type: String
    Description: "Running: A spot instance for Server 8 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName8:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 8 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 9 - Server Specific Variables
  # ====================================================

  ServerState9:
    Type: String
    Description: "Running: A spot instance for Server 9 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName9:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 9 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 10 - Server Specific Variables
  # ====================================================

  ServerState10:
    Type: String
    Description: "Running: A spot instance for Server 10 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName10:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 10 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 11 - Server Specific Variables
  # ====================================================

  ServerState11:
    Type: String
    Description: "Running: A spot instance for Server 11 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName11:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 11 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 12 - Server Specific Variables
  # ====================================================

  ServerState12:
    Type: String
    Description: "Running: A spot instance for Server 12 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName12:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 12 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 13 - Server Specific Variables
  # ====================================================

  ServerState13:
    Type: String
    Description: "Running: A spot instance for Server 13 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName13:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 13 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 14 - Server Specific Variables
  # ====================================================

  ServerState14:
    Type: String
    Description: "Running: A spot instance for Server 14 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName14:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 14 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 15 - Server Specific Variables
  # ====================================================

  ServerState15:
    Type: String
    Description: "Running: A spot instance for Server 15 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName15:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 15 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 16 - Server Specific Variables
  # ====================================================

  ServerState16:
    Type: String
    Description: "Running: A spot instance for Server 16 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName16:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 16 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 17 - Server Specific Variables
  # ====================================================

  ServerState17:
    Type: String
    Description: "Running: A spot instance for Server 17 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName17:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 17 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 18 - Server Specific Variables
  # ====================================================

  ServerState18:
    Type: String
    Description: "Running: A spot instance for Server 18 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName18:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 18 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 19 - Server Specific Variables
  # ====================================================

  ServerState19:
    Type: String
    Description: "Running: A spot instance for Server 19 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName19:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 19 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 20 - Server Specific Variables
  # ====================================================

  ServerState20:
    Type: String
    Description: "Running: A spot instance for Server 20 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName20:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 20 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 21 - Server Specific Variables
  # ====================================================

  ServerState21:
    Type: String
    Description: "Running: A spot instance for Server 21 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName21:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 21 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 22 - Server Specific Variables
  # ====================================================

  ServerState22:
    Type: String
    Description: "Running: A spot instance for Server 22 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName22:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 22 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 23 - Server Specific Variables
  # ====================================================

  ServerState23:
    Type: String
    Description: "Running: A spot instance for Server 23 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName23:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 23 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 24 - Server Specific Variables
  # ====================================================

  ServerState24:
    Type: String
    Description: "Running: A spot instance for Server 24 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName24:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 24 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 25 - Server Specific Variables
  # ====================================================

  ServerState25:
    Type: String
    Description: "Running: A spot instance for Server 25 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName25:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 25 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 26 - Server Specific Variables
  # ====================================================

  ServerState26:
    Type: String
    Description: "Running: A spot instance for Server 26 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName26:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 26 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 27 - Server Specific Variables
  # ====================================================

  ServerState27:
    Type: String
    Description: "Running: A spot instance for Server 27 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName27:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 27 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 28 - Server Specific Variables
  # ====================================================

  ServerState28:
    Type: String
    Description: "Running: A spot instance for Server 28 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName28:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 28 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 29 - Server Specific Variables
  # ====================================================

  ServerState29:
    Type: String
    Description: "Running: A spot instance for Server 29 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName29:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 29 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 30 - Server Specific Variables
  # ====================================================

  ServerState30:
    Type: String
    Description: "Running: A spot instance for Server 30 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName30:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 30 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 31 - Server Specific Variables
  # ====================================================

  ServerState31:
    Type: String
    Description: "Running: A spot instance for Server 31 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName31:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 31 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 32 - Server Specific Variables
  # ====================================================

  ServerState32:
    Type: String
    Description: "Running: A spot instance for Server 32 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName32:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 32 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 33 - Server Specific Variables
  # ====================================================

  ServerState33:
    Type: String
    Description: "Running: A spot instance for Server 33 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName33:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 33 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 34 - Server Specific Variables
  # ====================================================

  ServerState34:
    Type: String
    Description: "Running: A spot instance for Server 34 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName34:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 34 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 35 - Server Specific Variables
  # ====================================================

  ServerState35:
    Type: String
    Description: "Running: A spot instance for Server 35 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName35:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 35 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 36 - Server Specific Variables
  # ====================================================

  ServerState36:
    Type: String
    Description: "Running: A spot instance for Server 36 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName36:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 36 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 37 - Server Specific Variables
  # ====================================================

  ServerState37:
    Type: String
    Description: "Running: A spot instance for Server 37 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName37:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 37 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 38 - Server Specific Variables
  # ====================================================

  ServerState38:
    Type: String
    Description: "Running: A spot instance for Server 38 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName38:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 38 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 39 - Server Specific Variables
  # ====================================================

  ServerState39:
    Type: String
    Description: "Running: A spot instance for Server 39 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName39:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 39 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 40 - Server Specific Variables
  # ====================================================

  ServerState40:
    Type: String
    Description: "Running: A spot instance for Server 40 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName40:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 40 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 41 - Server Specific Variables
  # ====================================================

  ServerState41:
    Type: String
    Description: "Running: A spot instance for Server 41 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName41:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 41 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 42 - Server Specific Variables
  # ====================================================

  ServerState42:
    Type: String
    Description: "Running: A spot instance for Server 42 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName42:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 42 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 43 - Server Specific Variables
  # ====================================================

  ServerState43:
    Type: String
    Description: "Running: A spot instance for Server 43 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName43:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 43 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 44 - Server Specific Variables
  # ====================================================

  ServerState44:
    Type: String
    Description: "Running: A spot instance for Server 44 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName44:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 44 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 45 - Server Specific Variables
  # ====================================================

  ServerState45:
    Type: String
    Description: "Running: A spot instance for Server 45 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName45:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 45 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 46 - Server Specific Variables
  # ====================================================

  ServerState46:
    Type: String
    Description: "Running: A spot instance for Server 46 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName46:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 46 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 47 - Server Specific Variables
  # ====================================================

  ServerState47:
    Type: String
    Description: "Running: A spot instance for Server 47 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName47:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 47 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 48 - Server Specific Variables
  # ====================================================

  ServerState48:
    Type: String
    Description: "Running: A spot instance for Server 48 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName48:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 48 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 49 - Server Specific Variables
  # ====================================================

  ServerState49:
    Type: String
    Description: "Running: A spot instance for Server 49 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName49:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 49 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 50 - Server Specific Variables
  # ====================================================

  ServerState50:
    Type: String
    Description: "Running: A spot instance for Server 50 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName50:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 50 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 51 - Server Specific Variables
  # ====================================================

  ServerState51:
    Type: String
    Description: "Running: A spot instance for Server 51 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName51:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 51 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 52 - Server Specific Variables
  # ====================================================

  ServerState52:
    Type: String
    Description: "Running: A spot instance for Server 52 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName52:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 52 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 53 - Server Specific Variables
  # ====================================================

  ServerState53:
    Type: String
    Description: "Running: A spot instance for Server 53 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName53:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 53 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 54 - Server Specific Variables
  # ====================================================

  ServerState54:
    Type: String
    Description: "Running: A spot instance for Server 54 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName54:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 54 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 55 - Server Specific Variables
  # ====================================================

  ServerState55:
    Type: String
    Description: "Running: A spot instance for Server 55 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName55:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 55 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 56 - Server Specific Variables
  # ====================================================

  ServerState56:
    Type: String
    Description: "Running: A spot instance for Server 56 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName56:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 56 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 57 - Server Specific Variables
  # ====================================================

  ServerState57:
    Type: String
    Description: "Running: A spot instance for Server 57 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName57:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 57 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 58 - Server Specific Variables
  # ====================================================

  ServerState58:
    Type: String
    Description: "Running: A spot instance for Server 58 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName58:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 58 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 59 - Server Specific Variables
  # ====================================================

  ServerState59:
    Type: String
    Description: "Running: A spot instance for Server 59 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName59:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 59 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

  # ====================================================
  # 60 - Server Specific Variables
  # ====================================================

  ServerState60:
    Type: String
    Description: "Running: A spot instance for Server 60 will launch shortly after setting this parameter; your Factorio server should start within 5-10 minutes of changing this parameter (once UPDATE_IN_PROGRESS becomes UPDATE_COMPLETE). Stopped: Your spot instance (and thus Factorio container) will be terminated shortly after setting this parameter."
    Default: Running
    AllowedValues:
    - Running
    - Stopped

  RecordName60:
    Type: String
    Description: (Optional - An empty value disables this feature) If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance for server 60 starts, supply the name of the record here (e.g. factorio.mydomain.com).
    Default: ''

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Essential Configuration
        Parameters:
        - FactorioImageTag
        - ServerState1
        - ServerState2
        - InstanceType
        - SpotPrice
        - EnableRcon
        - UpdateModsOnStart
        - ServerState1
        - ServerState2
        - ServerState3
        - ServerState4
        - ServerState5
        - ServerState6
        - ServerState7
        - ServerState8
        - ServerState9
        - ServerState10
        - ServerState11
        - ServerState12
        - ServerState13
        - ServerState14
        - ServerState15
        - ServerState16
        - ServerState17
        - ServerState18
        - ServerState19
        - ServerState20
        - ServerState21
        - ServerState22
        - ServerState23
        - ServerState24
        - ServerState25
        - ServerState26
        - ServerState27
        - ServerState28
        - ServerState29
        - ServerState30
        - ServerState31
        - ServerState32
        - ServerState33
        - ServerState34
        - ServerState35
        - ServerState36
        - ServerState37
        - ServerState38
        - ServerState39
        - ServerState40
        - ServerState41
        - ServerState42
        - ServerState43
        - ServerState44
        - ServerState45
        - ServerState46
        - ServerState47
        - ServerState48
        - ServerState49
        - ServerState50
        - ServerState51
        - ServerState52
        - ServerState53
        - ServerState54
        - ServerState55
        - ServerState56
        - ServerState57
        - ServerState58
        - ServerState59
        - ServerState60
      - Label:
          default: Remote Access (SSH) Configuration (Optional)
        Parameters:
        - KeyPairName
        - YourIp
      - Label:
          default: DNS Configuration (Optional)
        Parameters:
        - HostedZoneId
        - RecordName1
        - RecordName2
        - RecordName3
        - RecordName4
        - RecordName5
        - RecordName6
        - RecordName7
        - RecordName8
        - RecordName9
        - RecordName10
        - RecordName11
        - RecordName12
        - RecordName13
        - RecordName14
        - RecordName15
        - RecordName16
        - RecordName17
        - RecordName18
        - RecordName19
        - RecordName20
        - RecordName21
        - RecordName22
        - RecordName23
        - RecordName24
        - RecordName25
        - RecordName26
        - RecordName27
        - RecordName28
        - RecordName29
        - RecordName30
        - RecordName31
        - RecordName32
        - RecordName33
        - RecordName34
        - RecordName35
        - RecordName36
        - RecordName37
        - RecordName38
        - RecordName39
        - RecordName40
        - RecordName41
        - RecordName42
        - RecordName43
        - RecordName44
        - RecordName45
        - RecordName46
        - RecordName47
        - RecordName48
        - RecordName49
        - RecordName50
        - RecordName51
        - RecordName52
        - RecordName53
        - RecordName54
        - RecordName55
        - RecordName56
        - RecordName57
        - RecordName58
        - RecordName59
        - RecordName60
    ParameterLabels:
      FactorioImageTag:
        default: "Which version of Factorio do you want to launch?"
      InstanceType:
        default: "Which instance type? You must make sure this is available in your region! https://aws.amazon.com/ec2/pricing/on-demand/"
      SpotPrice:
        default: "Maximum spot price per hour? Leave blank to disable spot pricing."
      KeyPairName:
        default: "If you wish to access the instance via SSH, select a Key Pair to use. https://console.aws.amazon.com/ec2/v2/home?#KeyPairs:sort=keyName"
      YourIp:
        default: "If you wish to access the instance via SSH, provide your public IP address."
      HostedZoneId:
        default: "If you have a hosted zone in Route 53 and wish to update a DNS record whenever your Factorio instance starts, supply the hosted zone ID here."
      EnableRcon:
        default: "Do you wish to enable RCON?"
      UpdateModsOnStart:
        default: "Do you wish to update your mods on container start"
      ServerState1:
        default: "Update this parameter to shut down / start up your Factorio server 1 as required to save on cost. Takes a few minutes to take effect."
      RecordName1:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 1 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState2:
        default: "Update this parameter to shut down / start up your Factorio server 2 as required to save on cost. Takes a few minutes to take effect."
      RecordName2:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 2 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState3:
        default: "Update this parameter to shut down / start up your Factorio server 3 as required to save on cost. Takes a few minutes to take effect."
      RecordName3:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 3 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState4:
        default: "Update this parameter to shut down / start up your Factorio server 4 as required to save on cost. Takes a few minutes to take effect."
      RecordName4:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 4 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState5:
        default: "Update this parameter to shut down / start up your Factorio server 5 as required to save on cost. Takes a few minutes to take effect."
      RecordName5:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 5 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState6:
        default: "Update this parameter to shut down / start up your Factorio server 6 as required to save on cost. Takes a few minutes to take effect."
      RecordName6:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 6 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState7:
        default: "Update this parameter to shut down / start up your Factorio server 7 as required to save on cost. Takes a few minutes to take effect."
      RecordName7:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 7 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState8:
        default: "Update this parameter to shut down / start up your Factorio server 8 as required to save on cost. Takes a few minutes to take effect."
      RecordName8:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 8 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState9:
        default: "Update this parameter to shut down / start up your Factorio server 9 as required to save on cost. Takes a few minutes to take effect."
      RecordName9:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 9 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState10:
        default: "Update this parameter to shut down / start up your Factorio server 10 as required to save on cost. Takes a few minutes to take effect."
      RecordName10:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 10 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState11:
        default: "Update this parameter to shut down / start up your Factorio server 11 as required to save on cost. Takes a few minutes to take effect."
      RecordName11:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 11 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState12:
        default: "Update this parameter to shut down / start up your Factorio server 12 as required to save on cost. Takes a few minutes to take effect."
      RecordName12:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 12 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState13:
        default: "Update this parameter to shut down / start up your Factorio server 13 as required to save on cost. Takes a few minutes to take effect."
      RecordName13:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 13 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState14:
        default: "Update this parameter to shut down / start up your Factorio server 14 as required to save on cost. Takes a few minutes to take effect."
      RecordName14:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 14 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState15:
        default: "Update this parameter to shut down / start up your Factorio server 15 as required to save on cost. Takes a few minutes to take effect."
      RecordName15:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 15 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState16:
        default: "Update this parameter to shut down / start up your Factorio server 16 as required to save on cost. Takes a few minutes to take effect."
      RecordName16:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 16 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState17:
        default: "Update this parameter to shut down / start up your Factorio server 17 as required to save on cost. Takes a few minutes to take effect."
      RecordName17:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 17 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState18:
        default: "Update this parameter to shut down / start up your Factorio server 18 as required to save on cost. Takes a few minutes to take effect."
      RecordName18:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 18 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState19:
        default: "Update this parameter to shut down / start up your Factorio server 19 as required to save on cost. Takes a few minutes to take effect."
      RecordName19:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 19 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState20:
        default: "Update this parameter to shut down / start up your Factorio server 20 as required to save on cost. Takes a few minutes to take effect."
      RecordName20:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 20 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState21:
        default: "Update this parameter to shut down / start up your Factorio server 21 as required to save on cost. Takes a few minutes to take effect."
      RecordName21:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 21 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState22:
        default: "Update this parameter to shut down / start up your Factorio server 22 as required to save on cost. Takes a few minutes to take effect."
      RecordName22:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 22 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState23:
        default: "Update this parameter to shut down / start up your Factorio server 23 as required to save on cost. Takes a few minutes to take effect."
      RecordName23:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 23 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState24:
        default: "Update this parameter to shut down / start up your Factorio server 24 as required to save on cost. Takes a few minutes to take effect."
      RecordName24:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 24 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState25:
        default: "Update this parameter to shut down / start up your Factorio server 25 as required to save on cost. Takes a few minutes to take effect."
      RecordName25:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 25 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState26:
        default: "Update this parameter to shut down / start up your Factorio server 26 as required to save on cost. Takes a few minutes to take effect."
      RecordName26:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 26 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState27:
        default: "Update this parameter to shut down / start up your Factorio server 27 as required to save on cost. Takes a few minutes to take effect."
      RecordName27:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 27 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState28:
        default: "Update this parameter to shut down / start up your Factorio server 28 as required to save on cost. Takes a few minutes to take effect."
      RecordName28:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 28 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState29:
        default: "Update this parameter to shut down / start up your Factorio server 29 as required to save on cost. Takes a few minutes to take effect."
      RecordName29:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 29 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState30:
        default: "Update this parameter to shut down / start up your Factorio server 30 as required to save on cost. Takes a few minutes to take effect."
      RecordName30:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 30 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState31:
        default: "Update this parameter to shut down / start up your Factorio server 31 as required to save on cost. Takes a few minutes to take effect."
      RecordName31:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 31 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState32:
        default: "Update this parameter to shut down / start up your Factorio server 32 as required to save on cost. Takes a few minutes to take effect."
      RecordName32:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 32 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState33:
        default: "Update this parameter to shut down / start up your Factorio server 33 as required to save on cost. Takes a few minutes to take effect."
      RecordName33:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 33 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState34:
        default: "Update this parameter to shut down / start up your Factorio server 34 as required to save on cost. Takes a few minutes to take effect."
      RecordName34:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 34 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState35:
        default: "Update this parameter to shut down / start up your Factorio server 35 as required to save on cost. Takes a few minutes to take effect."
      RecordName35:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 35 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState36:
        default: "Update this parameter to shut down / start up your Factorio server 36 as required to save on cost. Takes a few minutes to take effect."
      RecordName36:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 36 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState37:
        default: "Update this parameter to shut down / start up your Factorio server 37 as required to save on cost. Takes a few minutes to take effect."
      RecordName37:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 37 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState38:
        default: "Update this parameter to shut down / start up your Factorio server 38 as required to save on cost. Takes a few minutes to take effect."
      RecordName38:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 38 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState39:
        default: "Update this parameter to shut down / start up your Factorio server 39 as required to save on cost. Takes a few minutes to take effect."
      RecordName39:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 39 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState40:
        default: "Update this parameter to shut down / start up your Factorio server 40 as required to save on cost. Takes a few minutes to take effect."
      RecordName40:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 40 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState41:
        default: "Update this parameter to shut down / start up your Factorio server 41 as required to save on cost. Takes a few minutes to take effect."
      RecordName41:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 41 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState42:
        default: "Update this parameter to shut down / start up your Factorio server 42 as required to save on cost. Takes a few minutes to take effect."
      RecordName42:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 42 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState43:
        default: "Update this parameter to shut down / start up your Factorio server 43 as required to save on cost. Takes a few minutes to take effect."
      RecordName43:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 43 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState44:
        default: "Update this parameter to shut down / start up your Factorio server 44 as required to save on cost. Takes a few minutes to take effect."
      RecordName44:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 44 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState45:
        default: "Update this parameter to shut down / start up your Factorio server 45 as required to save on cost. Takes a few minutes to take effect."
      RecordName45:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 45 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState46:
        default: "Update this parameter to shut down / start up your Factorio server 46 as required to save on cost. Takes a few minutes to take effect."
      RecordName46:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 46 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState47:
        default: "Update this parameter to shut down / start up your Factorio server 47 as required to save on cost. Takes a few minutes to take effect."
      RecordName47:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 47 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState48:
        default: "Update this parameter to shut down / start up your Factorio server 48 as required to save on cost. Takes a few minutes to take effect."
      RecordName48:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 48 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState49:
        default: "Update this parameter to shut down / start up your Factorio server 49 as required to save on cost. Takes a few minutes to take effect."
      RecordName49:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 49 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState50:
        default: "Update this parameter to shut down / start up your Factorio server 50 as required to save on cost. Takes a few minutes to take effect."
      RecordName50:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 50 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState51:
        default: "Update this parameter to shut down / start up your Factorio server 51 as required to save on cost. Takes a few minutes to take effect."
      RecordName51:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 51 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState52:
        default: "Update this parameter to shut down / start up your Factorio server 52 as required to save on cost. Takes a few minutes to take effect."
      RecordName52:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 52 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState53:
        default: "Update this parameter to shut down / start up your Factorio server 53 as required to save on cost. Takes a few minutes to take effect."
      RecordName53:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 53 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState54:
        default: "Update this parameter to shut down / start up your Factorio server 54 as required to save on cost. Takes a few minutes to take effect."
      RecordName54:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 54 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState55:
        default: "Update this parameter to shut down / start up your Factorio server 55 as required to save on cost. Takes a few minutes to take effect."
      RecordName55:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 55 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState56:
        default: "Update this parameter to shut down / start up your Factorio server 56 as required to save on cost. Takes a few minutes to take effect."
      RecordName56:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 56 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState57:
        default: "Update this parameter to shut down / start up your Factorio server 57 as required to save on cost. Takes a few minutes to take effect."
      RecordName57:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 57 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState58:
        default: "Update this parameter to shut down / start up your Factorio server 58 as required to save on cost. Takes a few minutes to take effect."
      RecordName58:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 58 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState59:
        default: "Update this parameter to shut down / start up your Factorio server 59 as required to save on cost. Takes a few minutes to take effect."
      RecordName59:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 59 starts, supply a record name here (e.g. factorio.mydomain.com)."
      ServerState60:
        default: "Update this parameter to shut down / start up your Factorio server 60 as required to save on cost. Takes a few minutes to take effect."
      RecordName60:
        default: "If you have a hosted zone in Route 53 and wish to set a DNS record whenever your Factorio instance server 60 starts, supply a record name here (e.g. factorio.mydomain.com)."
Conditions:
  KeyPairNameProvided: !Not [ !Equals [ !Ref KeyPairName, '' ] ]
  IpAddressProvided: !Not [ !Equals [ !Ref YourIp, '' ] ]
  SpotPriceProvided: !Not [ !Equals [ !Ref SpotPrice, '' ] ]
  DoEnableRcon: !Equals [ !Ref EnableRcon, 'true' ]
  DnsConfigEnabled: !And
  - !Not [!Equals [!Ref HostedZoneId, '']]
  - !Or
    - !Not [!Equals [!Ref RecordName1, '']]
    - !Not [!Equals [!Ref RecordName2, '']]
    - !Not [!Equals [!Ref RecordName3, '']]
    - !Not [!Equals [!Ref RecordName4, '']]
    - !Not [!Equals [!Ref RecordName5, '']]
    - !Not [!Equals [!Ref RecordName6, '']]
    - !Not [!Equals [!Ref RecordName7, '']]
    - !Not [!Equals [!Ref RecordName8, '']]
    - !Not [!Equals [!Ref RecordName9, '']]
    - !Not [!Equals [!Ref RecordName10, '']]
    - !Not [!Equals [!Ref RecordName11, '']]
    - !Not [!Equals [!Ref RecordName12, '']]
    - !Not [!Equals [!Ref RecordName13, '']]
    - !Not [!Equals [!Ref RecordName14, '']]
    - !Not [!Equals [!Ref RecordName15, '']]
    - !Not [!Equals [!Ref RecordName16, '']]
    - !Not [!Equals [!Ref RecordName17, '']]
    - !Not [!Equals [!Ref RecordName18, '']]
    - !Not [!Equals [!Ref RecordName19, '']]
    - !Not [!Equals [!Ref RecordName20, '']]
    - !Not [!Equals [!Ref RecordName21, '']]
    - !Not [!Equals [!Ref RecordName22, '']]
    - !Not [!Equals [!Ref RecordName23, '']]
    - !Not [!Equals [!Ref RecordName24, '']]
    - !Not [!Equals [!Ref RecordName25, '']]
    - !Not [!Equals [!Ref RecordName26, '']]
    - !Not [!Equals [!Ref RecordName27, '']]
    - !Not [!Equals [!Ref RecordName28, '']]
    - !Not [!Equals [!Ref RecordName29, '']]
    - !Not [!Equals [!Ref RecordName30, '']]
    - !Not [!Equals [!Ref RecordName31, '']]
    - !Not [!Equals [!Ref RecordName32, '']]
    - !Not [!Equals [!Ref RecordName33, '']]
    - !Not [!Equals [!Ref RecordName34, '']]
    - !Not [!Equals [!Ref RecordName35, '']]
    - !Not [!Equals [!Ref RecordName36, '']]
    - !Not [!Equals [!Ref RecordName37, '']]
    - !Not [!Equals [!Ref RecordName38, '']]
    - !Not [!Equals [!Ref RecordName39, '']]
    - !Not [!Equals [!Ref RecordName40, '']]
    - !Not [!Equals [!Ref RecordName41, '']]
    - !Not [!Equals [!Ref RecordName42, '']]
    - !Not [!Equals [!Ref RecordName43, '']]
    - !Not [!Equals [!Ref RecordName44, '']]
    - !Not [!Equals [!Ref RecordName45, '']]
    - !Not [!Equals [!Ref RecordName46, '']]
    - !Not [!Equals [!Ref RecordName47, '']]
    - !Not [!Equals [!Ref RecordName48, '']]
    - !Not [!Equals [!Ref RecordName49, '']]
    - !Not [!Equals [!Ref RecordName50, '']]
    - !Not [!Equals [!Ref RecordName51, '']]
    - !Not [!Equals [!Ref RecordName52, '']]
    - !Not [!Equals [!Ref RecordName53, '']]
    - !Not [!Equals [!Ref RecordName54, '']]
    - !Not [!Equals [!Ref RecordName55, '']]
    - !Not [!Equals [!Ref RecordName56, '']]
    - !Not [!Equals [!Ref RecordName57, '']]
    - !Not [!Equals [!Ref RecordName58, '']]
    - !Not [!Equals [!Ref RecordName59, '']]
    - !Not [!Equals [!Ref RecordName60, '']]


Mappings:
  ServerState:
    Running:
      DesiredCapacity: 1
    Stopped:
      DesiredCapacity: 0

Resources:

  # ====================================================
  # BASIC VPC
  # ====================================================

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.100.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - !GetAZs
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc

  SubnetARoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA

  SubnetBRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - !GetAZs
        Ref: 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ 10.100.0.0/26, 4, 4 ] ]
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # ====================================================
  # Common Resources
  # ====================================================

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "route53:*"
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  # ====================================================
  # 1 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs1:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount1A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs1
      SecurityGroups:
      - !Ref EfsSg1
      SubnetId: !Ref SubnetA

  Mount1B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs1
      SecurityGroups:
      - !Ref EfsSg1
      SubnetId: !Ref SubnetB

  EfsSg1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-1"
      GroupDescription: !Sub "${AWS::StackName}-efs-1"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg1
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-1"
      GroupDescription: !Sub "${AWS::StackName}-ec2-1"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration1:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg1
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster1} >> /etc/ecs/ecs.config

  AutoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-1"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration1
      MaxSize: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster1:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-1"

  EcsService1:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster1
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState1, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-1"
      TaskDefinition: !Ref EcsTask1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask1:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount1A
    - Mount1B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-1"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs1
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 2 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs2:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount2A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs2
      SecurityGroups:
      - !Ref EfsSg2
      SubnetId: !Ref SubnetA

  Mount2B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs2
      SecurityGroups:
      - !Ref EfsSg2
      SubnetId: !Ref SubnetB

  EfsSg2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-2"
      GroupDescription: !Sub "${AWS::StackName}-efs-2"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg2
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-2"
      GroupDescription: !Sub "${AWS::StackName}-ec2-2"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration2:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg2
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster2} >> /etc/ecs/ecs.config

  AutoScalingGroup2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-2"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration2
      MaxSize: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster2:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-2"

  EcsService2:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster2
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState2, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-2"
      TaskDefinition: !Ref EcsTask2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask2:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount2A
    - Mount2B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-2"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs2
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 3 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs3:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount3A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs3
      SecurityGroups:
      - !Ref EfsSg3
      SubnetId: !Ref SubnetA

  Mount3B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs3
      SecurityGroups:
      - !Ref EfsSg3
      SubnetId: !Ref SubnetB

  EfsSg3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-3"
      GroupDescription: !Sub "${AWS::StackName}-efs-3"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg3
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-3"
      GroupDescription: !Sub "${AWS::StackName}-ec2-3"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration3:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg3
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster3} >> /etc/ecs/ecs.config

  AutoScalingGroup3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-3"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration3
      MaxSize: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster3:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-3"

  EcsService3:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster3
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState3, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-3"
      TaskDefinition: !Ref EcsTask3
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask3:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount3A
    - Mount3B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-3"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs3
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 4 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs4:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount4A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs4
      SecurityGroups:
      - !Ref EfsSg4
      SubnetId: !Ref SubnetA

  Mount4B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs4
      SecurityGroups:
      - !Ref EfsSg4
      SubnetId: !Ref SubnetB

  EfsSg4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-4"
      GroupDescription: !Sub "${AWS::StackName}-efs-4"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg4
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-4"
      GroupDescription: !Sub "${AWS::StackName}-ec2-4"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration4:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg4
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster4} >> /etc/ecs/ecs.config

  AutoScalingGroup4:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-4"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration4
      MaxSize: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster4:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-4"

  EcsService4:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster4
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState4, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-4"
      TaskDefinition: !Ref EcsTask4
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask4:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount4A
    - Mount4B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-4"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs4
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 5 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs5:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount5A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs5
      SecurityGroups:
      - !Ref EfsSg5
      SubnetId: !Ref SubnetA

  Mount5B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs5
      SecurityGroups:
      - !Ref EfsSg5
      SubnetId: !Ref SubnetB

  EfsSg5:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-5"
      GroupDescription: !Sub "${AWS::StackName}-efs-5"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg5
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg5:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-5"
      GroupDescription: !Sub "${AWS::StackName}-ec2-5"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration5:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg5
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster5} >> /etc/ecs/ecs.config

  AutoScalingGroup5:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-5"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration5
      MaxSize: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster5:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-5"

  EcsService5:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster5
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState5, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-5"
      TaskDefinition: !Ref EcsTask5
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask5:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount5A
    - Mount5B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-5"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs5
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 6 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs6:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount6A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs6
      SecurityGroups:
      - !Ref EfsSg6
      SubnetId: !Ref SubnetA

  Mount6B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs6
      SecurityGroups:
      - !Ref EfsSg6
      SubnetId: !Ref SubnetB

  EfsSg6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-6"
      GroupDescription: !Sub "${AWS::StackName}-efs-6"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg6
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg6:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-6"
      GroupDescription: !Sub "${AWS::StackName}-ec2-6"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration6:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg6
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster6} >> /etc/ecs/ecs.config

  AutoScalingGroup6:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-6"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration6
      MaxSize: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster6:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-6"

  EcsService6:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster6
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState6, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-6"
      TaskDefinition: !Ref EcsTask6
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask6:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount6A
    - Mount6B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-6"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs6
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 7 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs7:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount7A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs7
      SecurityGroups:
      - !Ref EfsSg7
      SubnetId: !Ref SubnetA

  Mount7B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs7
      SecurityGroups:
      - !Ref EfsSg7
      SubnetId: !Ref SubnetB

  EfsSg7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-7"
      GroupDescription: !Sub "${AWS::StackName}-efs-7"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg7
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg7:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-7"
      GroupDescription: !Sub "${AWS::StackName}-ec2-7"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration7:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg7
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster7} >> /etc/ecs/ecs.config

  AutoScalingGroup7:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-7"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration7
      MaxSize: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster7:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-7"

  EcsService7:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster7
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState7, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-7"
      TaskDefinition: !Ref EcsTask7
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask7:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount7A
    - Mount7B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-7"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs7
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 8 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs8:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount8A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs8
      SecurityGroups:
      - !Ref EfsSg8
      SubnetId: !Ref SubnetA

  Mount8B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs8
      SecurityGroups:
      - !Ref EfsSg8
      SubnetId: !Ref SubnetB

  EfsSg8:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-8"
      GroupDescription: !Sub "${AWS::StackName}-efs-8"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg8
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg8:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-8"
      GroupDescription: !Sub "${AWS::StackName}-ec2-8"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration8:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg8
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster8} >> /etc/ecs/ecs.config

  AutoScalingGroup8:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-8"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration8
      MaxSize: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster8:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-8"

  EcsService8:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster8
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState8, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-8"
      TaskDefinition: !Ref EcsTask8
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask8:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount8A
    - Mount8B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-8"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs8
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 9 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs9:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount9A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs9
      SecurityGroups:
      - !Ref EfsSg9
      SubnetId: !Ref SubnetA

  Mount9B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs9
      SecurityGroups:
      - !Ref EfsSg9
      SubnetId: !Ref SubnetB

  EfsSg9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-9"
      GroupDescription: !Sub "${AWS::StackName}-efs-9"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg9
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg9:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-9"
      GroupDescription: !Sub "${AWS::StackName}-ec2-9"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration9:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg9
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster9} >> /etc/ecs/ecs.config

  AutoScalingGroup9:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-9"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration9
      MaxSize: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster9:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-9"

  EcsService9:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster9
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState9, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-9"
      TaskDefinition: !Ref EcsTask9
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask9:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount9A
    - Mount9B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-9"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs9
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 10 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs10:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount10A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs10
      SecurityGroups:
      - !Ref EfsSg10
      SubnetId: !Ref SubnetA

  Mount10B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs10
      SecurityGroups:
      - !Ref EfsSg10
      SubnetId: !Ref SubnetB

  EfsSg10:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-10"
      GroupDescription: !Sub "${AWS::StackName}-efs-10"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg10
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg10:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-10"
      GroupDescription: !Sub "${AWS::StackName}-ec2-10"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration10:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg10
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster10} >> /etc/ecs/ecs.config

  AutoScalingGroup10:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-10"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration10
      MaxSize: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster10:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-10"

  EcsService10:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster10
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState10, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-10"
      TaskDefinition: !Ref EcsTask10
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask10:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount10A
    - Mount10B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-10"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs10
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 11 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs11:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount11A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs11
      SecurityGroups:
      - !Ref EfsSg11
      SubnetId: !Ref SubnetA

  Mount11B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs11
      SecurityGroups:
      - !Ref EfsSg11
      SubnetId: !Ref SubnetB

  EfsSg11:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-11"
      GroupDescription: !Sub "${AWS::StackName}-efs-11"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg11
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg11:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-11"
      GroupDescription: !Sub "${AWS::StackName}-ec2-11"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration11:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg11
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster11} >> /etc/ecs/ecs.config

  AutoScalingGroup11:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-11"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration11
      MaxSize: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster11:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-11"

  EcsService11:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster11
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState11, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-11"
      TaskDefinition: !Ref EcsTask11
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask11:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount11A
    - Mount11B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-11"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs11
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 12 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs12:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount12A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs12
      SecurityGroups:
      - !Ref EfsSg12
      SubnetId: !Ref SubnetA

  Mount12B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs12
      SecurityGroups:
      - !Ref EfsSg12
      SubnetId: !Ref SubnetB

  EfsSg12:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-12"
      GroupDescription: !Sub "${AWS::StackName}-efs-12"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg12
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg12:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-12"
      GroupDescription: !Sub "${AWS::StackName}-ec2-12"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration12:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg12
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster12} >> /etc/ecs/ecs.config

  AutoScalingGroup12:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-12"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration12
      MaxSize: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster12:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-12"

  EcsService12:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster12
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState12, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-12"
      TaskDefinition: !Ref EcsTask12
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask12:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount12A
    - Mount12B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-12"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs12
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 13 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs13:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount13A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs13
      SecurityGroups:
      - !Ref EfsSg13
      SubnetId: !Ref SubnetA

  Mount13B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs13
      SecurityGroups:
      - !Ref EfsSg13
      SubnetId: !Ref SubnetB

  EfsSg13:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-13"
      GroupDescription: !Sub "${AWS::StackName}-efs-13"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg13
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg13:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-13"
      GroupDescription: !Sub "${AWS::StackName}-ec2-13"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration13:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg13
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster13} >> /etc/ecs/ecs.config

  AutoScalingGroup13:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-13"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration13
      MaxSize: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster13:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-13"

  EcsService13:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster13
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState13, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-13"
      TaskDefinition: !Ref EcsTask13
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask13:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount13A
    - Mount13B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-13"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs13
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 14 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs14:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount14A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs14
      SecurityGroups:
      - !Ref EfsSg14
      SubnetId: !Ref SubnetA

  Mount14B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs14
      SecurityGroups:
      - !Ref EfsSg14
      SubnetId: !Ref SubnetB

  EfsSg14:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-14"
      GroupDescription: !Sub "${AWS::StackName}-efs-14"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg14
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg14:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-14"
      GroupDescription: !Sub "${AWS::StackName}-ec2-14"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration14:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg14
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster14} >> /etc/ecs/ecs.config

  AutoScalingGroup14:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-14"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration14
      MaxSize: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster14:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-14"

  EcsService14:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster14
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState14, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-14"
      TaskDefinition: !Ref EcsTask14
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask14:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount14A
    - Mount14B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-14"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs14
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 15 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs15:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount15A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs15
      SecurityGroups:
      - !Ref EfsSg15
      SubnetId: !Ref SubnetA

  Mount15B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs15
      SecurityGroups:
      - !Ref EfsSg15
      SubnetId: !Ref SubnetB

  EfsSg15:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-15"
      GroupDescription: !Sub "${AWS::StackName}-efs-15"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg15
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg15:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-15"
      GroupDescription: !Sub "${AWS::StackName}-ec2-15"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration15:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg15
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster15} >> /etc/ecs/ecs.config

  AutoScalingGroup15:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-15"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration15
      MaxSize: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster15:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-15"

  EcsService15:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster15
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState15, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-15"
      TaskDefinition: !Ref EcsTask15
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask15:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount15A
    - Mount15B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-15"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs15
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 16 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs16:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount16A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs16
      SecurityGroups:
      - !Ref EfsSg16
      SubnetId: !Ref SubnetA

  Mount16B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs16
      SecurityGroups:
      - !Ref EfsSg16
      SubnetId: !Ref SubnetB

  EfsSg16:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-16"
      GroupDescription: !Sub "${AWS::StackName}-efs-16"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg16
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg16:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-16"
      GroupDescription: !Sub "${AWS::StackName}-ec2-16"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration16:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg16
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster16} >> /etc/ecs/ecs.config

  AutoScalingGroup16:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-16"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration16
      MaxSize: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster16:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-16"

  EcsService16:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster16
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState16, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-16"
      TaskDefinition: !Ref EcsTask16
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask16:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount16A
    - Mount16B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-16"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs16
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 17 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs17:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount17A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs17
      SecurityGroups:
      - !Ref EfsSg17
      SubnetId: !Ref SubnetA

  Mount17B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs17
      SecurityGroups:
      - !Ref EfsSg17
      SubnetId: !Ref SubnetB

  EfsSg17:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-17"
      GroupDescription: !Sub "${AWS::StackName}-efs-17"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg17
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg17:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-17"
      GroupDescription: !Sub "${AWS::StackName}-ec2-17"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration17:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg17
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster17} >> /etc/ecs/ecs.config

  AutoScalingGroup17:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-17"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration17
      MaxSize: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster17:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-17"

  EcsService17:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster17
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState17, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-17"
      TaskDefinition: !Ref EcsTask17
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask17:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount17A
    - Mount17B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-17"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs17
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 18 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs18:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount18A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs18
      SecurityGroups:
      - !Ref EfsSg18
      SubnetId: !Ref SubnetA

  Mount18B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs18
      SecurityGroups:
      - !Ref EfsSg18
      SubnetId: !Ref SubnetB

  EfsSg18:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-18"
      GroupDescription: !Sub "${AWS::StackName}-efs-18"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg18
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg18:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-18"
      GroupDescription: !Sub "${AWS::StackName}-ec2-18"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration18:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg18
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster18} >> /etc/ecs/ecs.config

  AutoScalingGroup18:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-18"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration18
      MaxSize: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster18:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-18"

  EcsService18:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster18
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState18, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-18"
      TaskDefinition: !Ref EcsTask18
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask18:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount18A
    - Mount18B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-18"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs18
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 19 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs19:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount19A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs19
      SecurityGroups:
      - !Ref EfsSg19
      SubnetId: !Ref SubnetA

  Mount19B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs19
      SecurityGroups:
      - !Ref EfsSg19
      SubnetId: !Ref SubnetB

  EfsSg19:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-19"
      GroupDescription: !Sub "${AWS::StackName}-efs-19"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg19
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg19:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-19"
      GroupDescription: !Sub "${AWS::StackName}-ec2-19"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration19:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg19
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster19} >> /etc/ecs/ecs.config

  AutoScalingGroup19:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-19"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration19
      MaxSize: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster19:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-19"

  EcsService19:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster19
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState19, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-19"
      TaskDefinition: !Ref EcsTask19
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask19:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount19A
    - Mount19B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-19"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs19
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 20 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs20:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount20A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs20
      SecurityGroups:
      - !Ref EfsSg20
      SubnetId: !Ref SubnetA

  Mount20B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs20
      SecurityGroups:
      - !Ref EfsSg20
      SubnetId: !Ref SubnetB

  EfsSg20:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-20"
      GroupDescription: !Sub "${AWS::StackName}-efs-20"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg20
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg20:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-20"
      GroupDescription: !Sub "${AWS::StackName}-ec2-20"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration20:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg20
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster20} >> /etc/ecs/ecs.config

  AutoScalingGroup20:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-20"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration20
      MaxSize: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster20:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-20"

  EcsService20:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster20
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState20, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-20"
      TaskDefinition: !Ref EcsTask20
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask20:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount20A
    - Mount20B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-20"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs20
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 21 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs21:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount21A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs21
      SecurityGroups:
      - !Ref EfsSg21
      SubnetId: !Ref SubnetA

  Mount21B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs21
      SecurityGroups:
      - !Ref EfsSg21
      SubnetId: !Ref SubnetB

  EfsSg21:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-21"
      GroupDescription: !Sub "${AWS::StackName}-efs-21"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg21
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg21:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-21"
      GroupDescription: !Sub "${AWS::StackName}-ec2-21"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration21:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg21
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster21} >> /etc/ecs/ecs.config

  AutoScalingGroup21:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-21"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration21
      MaxSize: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster21:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-21"

  EcsService21:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster21
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState21, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-21"
      TaskDefinition: !Ref EcsTask21
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask21:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount21A
    - Mount21B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-21"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs21
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 22 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs22:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount22A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs22
      SecurityGroups:
      - !Ref EfsSg22
      SubnetId: !Ref SubnetA

  Mount22B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs22
      SecurityGroups:
      - !Ref EfsSg22
      SubnetId: !Ref SubnetB

  EfsSg22:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-22"
      GroupDescription: !Sub "${AWS::StackName}-efs-22"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg22
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg22:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-22"
      GroupDescription: !Sub "${AWS::StackName}-ec2-22"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration22:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg22
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster22} >> /etc/ecs/ecs.config

  AutoScalingGroup22:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-22"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration22
      MaxSize: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster22:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-22"

  EcsService22:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster22
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState22, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-22"
      TaskDefinition: !Ref EcsTask22
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask22:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount22A
    - Mount22B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-22"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs22
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 23 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs23:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount23A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs23
      SecurityGroups:
      - !Ref EfsSg23
      SubnetId: !Ref SubnetA

  Mount23B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs23
      SecurityGroups:
      - !Ref EfsSg23
      SubnetId: !Ref SubnetB

  EfsSg23:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-23"
      GroupDescription: !Sub "${AWS::StackName}-efs-23"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg23
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg23:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-23"
      GroupDescription: !Sub "${AWS::StackName}-ec2-23"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration23:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg23
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster23} >> /etc/ecs/ecs.config

  AutoScalingGroup23:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-23"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration23
      MaxSize: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster23:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-23"

  EcsService23:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster23
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState23, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-23"
      TaskDefinition: !Ref EcsTask23
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask23:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount23A
    - Mount23B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-23"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs23
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 24 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs24:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount24A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs24
      SecurityGroups:
      - !Ref EfsSg24
      SubnetId: !Ref SubnetA

  Mount24B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs24
      SecurityGroups:
      - !Ref EfsSg24
      SubnetId: !Ref SubnetB

  EfsSg24:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-24"
      GroupDescription: !Sub "${AWS::StackName}-efs-24"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg24
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg24:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-24"
      GroupDescription: !Sub "${AWS::StackName}-ec2-24"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration24:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg24
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster24} >> /etc/ecs/ecs.config

  AutoScalingGroup24:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-24"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration24
      MaxSize: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster24:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-24"

  EcsService24:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster24
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState24, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-24"
      TaskDefinition: !Ref EcsTask24
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask24:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount24A
    - Mount24B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-24"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs24
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 25 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs25:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount25A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs25
      SecurityGroups:
      - !Ref EfsSg25
      SubnetId: !Ref SubnetA

  Mount25B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs25
      SecurityGroups:
      - !Ref EfsSg25
      SubnetId: !Ref SubnetB

  EfsSg25:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-25"
      GroupDescription: !Sub "${AWS::StackName}-efs-25"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg25
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg25:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-25"
      GroupDescription: !Sub "${AWS::StackName}-ec2-25"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration25:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg25
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster25} >> /etc/ecs/ecs.config

  AutoScalingGroup25:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-25"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration25
      MaxSize: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster25:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-25"

  EcsService25:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster25
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState25, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-25"
      TaskDefinition: !Ref EcsTask25
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask25:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount25A
    - Mount25B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-25"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs25
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 26 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs26:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount26A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs26
      SecurityGroups:
      - !Ref EfsSg26
      SubnetId: !Ref SubnetA

  Mount26B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs26
      SecurityGroups:
      - !Ref EfsSg26
      SubnetId: !Ref SubnetB

  EfsSg26:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-26"
      GroupDescription: !Sub "${AWS::StackName}-efs-26"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg26
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg26:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-26"
      GroupDescription: !Sub "${AWS::StackName}-ec2-26"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration26:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg26
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster26} >> /etc/ecs/ecs.config

  AutoScalingGroup26:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-26"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration26
      MaxSize: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster26:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-26"

  EcsService26:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster26
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState26, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-26"
      TaskDefinition: !Ref EcsTask26
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask26:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount26A
    - Mount26B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-26"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs26
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 27 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs27:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount27A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs27
      SecurityGroups:
      - !Ref EfsSg27
      SubnetId: !Ref SubnetA

  Mount27B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs27
      SecurityGroups:
      - !Ref EfsSg27
      SubnetId: !Ref SubnetB

  EfsSg27:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-27"
      GroupDescription: !Sub "${AWS::StackName}-efs-27"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg27
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg27:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-27"
      GroupDescription: !Sub "${AWS::StackName}-ec2-27"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration27:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg27
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster27} >> /etc/ecs/ecs.config

  AutoScalingGroup27:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-27"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration27
      MaxSize: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster27:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-27"

  EcsService27:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster27
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState27, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-27"
      TaskDefinition: !Ref EcsTask27
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask27:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount27A
    - Mount27B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-27"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs27
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 28 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs28:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount28A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs28
      SecurityGroups:
      - !Ref EfsSg28
      SubnetId: !Ref SubnetA

  Mount28B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs28
      SecurityGroups:
      - !Ref EfsSg28
      SubnetId: !Ref SubnetB

  EfsSg28:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-28"
      GroupDescription: !Sub "${AWS::StackName}-efs-28"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg28
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg28:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-28"
      GroupDescription: !Sub "${AWS::StackName}-ec2-28"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration28:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg28
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster28} >> /etc/ecs/ecs.config

  AutoScalingGroup28:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-28"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration28
      MaxSize: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster28:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-28"

  EcsService28:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster28
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState28, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-28"
      TaskDefinition: !Ref EcsTask28
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask28:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount28A
    - Mount28B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-28"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs28
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 29 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs29:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount29A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs29
      SecurityGroups:
      - !Ref EfsSg29
      SubnetId: !Ref SubnetA

  Mount29B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs29
      SecurityGroups:
      - !Ref EfsSg29
      SubnetId: !Ref SubnetB

  EfsSg29:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-29"
      GroupDescription: !Sub "${AWS::StackName}-efs-29"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg29
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg29:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-29"
      GroupDescription: !Sub "${AWS::StackName}-ec2-29"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration29:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg29
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster29} >> /etc/ecs/ecs.config

  AutoScalingGroup29:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-29"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration29
      MaxSize: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster29:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-29"

  EcsService29:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster29
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState29, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-29"
      TaskDefinition: !Ref EcsTask29
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask29:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount29A
    - Mount29B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-29"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs29
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 30 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs30:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount30A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs30
      SecurityGroups:
      - !Ref EfsSg30
      SubnetId: !Ref SubnetA

  Mount30B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs30
      SecurityGroups:
      - !Ref EfsSg30
      SubnetId: !Ref SubnetB

  EfsSg30:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-30"
      GroupDescription: !Sub "${AWS::StackName}-efs-30"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg30
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg30:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-30"
      GroupDescription: !Sub "${AWS::StackName}-ec2-30"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration30:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg30
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster30} >> /etc/ecs/ecs.config

  AutoScalingGroup30:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-30"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration30
      MaxSize: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster30:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-30"

  EcsService30:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster30
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState30, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-30"
      TaskDefinition: !Ref EcsTask30
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask30:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount30A
    - Mount30B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-30"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs30
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 31 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs31:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount31A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs31
      SecurityGroups:
      - !Ref EfsSg31
      SubnetId: !Ref SubnetA

  Mount31B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs31
      SecurityGroups:
      - !Ref EfsSg31
      SubnetId: !Ref SubnetB

  EfsSg31:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-31"
      GroupDescription: !Sub "${AWS::StackName}-efs-31"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg31
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg31:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-31"
      GroupDescription: !Sub "${AWS::StackName}-ec2-31"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration31:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg31
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster31} >> /etc/ecs/ecs.config

  AutoScalingGroup31:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-31"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration31
      MaxSize: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster31:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-31"

  EcsService31:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster31
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState31, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-31"
      TaskDefinition: !Ref EcsTask31
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask31:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount31A
    - Mount31B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-31"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs31
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 32 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs32:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount32A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs32
      SecurityGroups:
      - !Ref EfsSg32
      SubnetId: !Ref SubnetA

  Mount32B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs32
      SecurityGroups:
      - !Ref EfsSg32
      SubnetId: !Ref SubnetB

  EfsSg32:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-32"
      GroupDescription: !Sub "${AWS::StackName}-efs-32"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg32
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg32:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-32"
      GroupDescription: !Sub "${AWS::StackName}-ec2-32"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration32:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg32
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster32} >> /etc/ecs/ecs.config

  AutoScalingGroup32:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-32"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration32
      MaxSize: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster32:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-32"

  EcsService32:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster32
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState32, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-32"
      TaskDefinition: !Ref EcsTask32
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask32:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount32A
    - Mount32B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-32"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs32
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 33 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs33:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount33A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs33
      SecurityGroups:
      - !Ref EfsSg33
      SubnetId: !Ref SubnetA

  Mount33B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs33
      SecurityGroups:
      - !Ref EfsSg33
      SubnetId: !Ref SubnetB

  EfsSg33:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-33"
      GroupDescription: !Sub "${AWS::StackName}-efs-33"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg33
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg33:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-33"
      GroupDescription: !Sub "${AWS::StackName}-ec2-33"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration33:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg33
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster33} >> /etc/ecs/ecs.config

  AutoScalingGroup33:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-33"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration33
      MaxSize: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster33:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-33"

  EcsService33:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster33
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState33, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-33"
      TaskDefinition: !Ref EcsTask33
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask33:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount33A
    - Mount33B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-33"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs33
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 34 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs34:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount34A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs34
      SecurityGroups:
      - !Ref EfsSg34
      SubnetId: !Ref SubnetA

  Mount34B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs34
      SecurityGroups:
      - !Ref EfsSg34
      SubnetId: !Ref SubnetB

  EfsSg34:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-34"
      GroupDescription: !Sub "${AWS::StackName}-efs-34"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg34
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg34:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-34"
      GroupDescription: !Sub "${AWS::StackName}-ec2-34"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration34:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg34
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster34} >> /etc/ecs/ecs.config

  AutoScalingGroup34:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-34"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration34
      MaxSize: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster34:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-34"

  EcsService34:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster34
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState34, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-34"
      TaskDefinition: !Ref EcsTask34
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask34:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount34A
    - Mount34B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-34"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs34
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 35 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs35:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount35A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs35
      SecurityGroups:
      - !Ref EfsSg35
      SubnetId: !Ref SubnetA

  Mount35B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs35
      SecurityGroups:
      - !Ref EfsSg35
      SubnetId: !Ref SubnetB

  EfsSg35:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-35"
      GroupDescription: !Sub "${AWS::StackName}-efs-35"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg35
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg35:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-35"
      GroupDescription: !Sub "${AWS::StackName}-ec2-35"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration35:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg35
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster35} >> /etc/ecs/ecs.config

  AutoScalingGroup35:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-35"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration35
      MaxSize: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster35:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-35"

  EcsService35:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster35
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState35, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-35"
      TaskDefinition: !Ref EcsTask35
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask35:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount35A
    - Mount35B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-35"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs35
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 36 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs36:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount36A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs36
      SecurityGroups:
      - !Ref EfsSg36
      SubnetId: !Ref SubnetA

  Mount36B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs36
      SecurityGroups:
      - !Ref EfsSg36
      SubnetId: !Ref SubnetB

  EfsSg36:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-36"
      GroupDescription: !Sub "${AWS::StackName}-efs-36"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg36
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg36:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-36"
      GroupDescription: !Sub "${AWS::StackName}-ec2-36"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration36:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg36
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster36} >> /etc/ecs/ecs.config

  AutoScalingGroup36:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-36"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration36
      MaxSize: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster36:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-36"

  EcsService36:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster36
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState36, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-36"
      TaskDefinition: !Ref EcsTask36
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask36:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount36A
    - Mount36B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-36"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs36
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 37 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs37:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount37A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs37
      SecurityGroups:
      - !Ref EfsSg37
      SubnetId: !Ref SubnetA

  Mount37B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs37
      SecurityGroups:
      - !Ref EfsSg37
      SubnetId: !Ref SubnetB

  EfsSg37:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-37"
      GroupDescription: !Sub "${AWS::StackName}-efs-37"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg37
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg37:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-37"
      GroupDescription: !Sub "${AWS::StackName}-ec2-37"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration37:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg37
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster37} >> /etc/ecs/ecs.config

  AutoScalingGroup37:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-37"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration37
      MaxSize: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster37:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-37"

  EcsService37:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster37
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState37, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-37"
      TaskDefinition: !Ref EcsTask37
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask37:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount37A
    - Mount37B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-37"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs37
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 38 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs38:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount38A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs38
      SecurityGroups:
      - !Ref EfsSg38
      SubnetId: !Ref SubnetA

  Mount38B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs38
      SecurityGroups:
      - !Ref EfsSg38
      SubnetId: !Ref SubnetB

  EfsSg38:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-38"
      GroupDescription: !Sub "${AWS::StackName}-efs-38"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg38
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg38:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-38"
      GroupDescription: !Sub "${AWS::StackName}-ec2-38"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration38:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg38
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster38} >> /etc/ecs/ecs.config

  AutoScalingGroup38:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-38"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration38
      MaxSize: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster38:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-38"

  EcsService38:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster38
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState38, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-38"
      TaskDefinition: !Ref EcsTask38
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask38:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount38A
    - Mount38B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-38"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs38
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 39 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs39:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount39A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs39
      SecurityGroups:
      - !Ref EfsSg39
      SubnetId: !Ref SubnetA

  Mount39B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs39
      SecurityGroups:
      - !Ref EfsSg39
      SubnetId: !Ref SubnetB

  EfsSg39:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-39"
      GroupDescription: !Sub "${AWS::StackName}-efs-39"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg39
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg39:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-39"
      GroupDescription: !Sub "${AWS::StackName}-ec2-39"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration39:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg39
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster39} >> /etc/ecs/ecs.config

  AutoScalingGroup39:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-39"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration39
      MaxSize: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster39:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-39"

  EcsService39:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster39
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState39, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-39"
      TaskDefinition: !Ref EcsTask39
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask39:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount39A
    - Mount39B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-39"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs39
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 40 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs40:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount40A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs40
      SecurityGroups:
      - !Ref EfsSg40
      SubnetId: !Ref SubnetA

  Mount40B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs40
      SecurityGroups:
      - !Ref EfsSg40
      SubnetId: !Ref SubnetB

  EfsSg40:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-40"
      GroupDescription: !Sub "${AWS::StackName}-efs-40"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg40
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg40:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-40"
      GroupDescription: !Sub "${AWS::StackName}-ec2-40"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration40:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg40
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster40} >> /etc/ecs/ecs.config

  AutoScalingGroup40:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-40"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration40
      MaxSize: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster40:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-40"

  EcsService40:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster40
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState40, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-40"
      TaskDefinition: !Ref EcsTask40
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask40:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount40A
    - Mount40B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-40"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs40
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 41 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs41:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount41A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs41
      SecurityGroups:
      - !Ref EfsSg41
      SubnetId: !Ref SubnetA

  Mount41B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs41
      SecurityGroups:
      - !Ref EfsSg41
      SubnetId: !Ref SubnetB

  EfsSg41:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-41"
      GroupDescription: !Sub "${AWS::StackName}-efs-41"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg41
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg41:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-41"
      GroupDescription: !Sub "${AWS::StackName}-ec2-41"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration41:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg41
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster41} >> /etc/ecs/ecs.config

  AutoScalingGroup41:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-41"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration41
      MaxSize: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster41:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-41"

  EcsService41:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster41
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState41, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-41"
      TaskDefinition: !Ref EcsTask41
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask41:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount41A
    - Mount41B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-41"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs41
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 42 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs42:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount42A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs42
      SecurityGroups:
      - !Ref EfsSg42
      SubnetId: !Ref SubnetA

  Mount42B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs42
      SecurityGroups:
      - !Ref EfsSg42
      SubnetId: !Ref SubnetB

  EfsSg42:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-42"
      GroupDescription: !Sub "${AWS::StackName}-efs-42"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg42
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg42:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-42"
      GroupDescription: !Sub "${AWS::StackName}-ec2-42"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration42:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg42
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster42} >> /etc/ecs/ecs.config

  AutoScalingGroup42:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-42"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration42
      MaxSize: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster42:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-42"

  EcsService42:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster42
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState42, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-42"
      TaskDefinition: !Ref EcsTask42
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask42:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount42A
    - Mount42B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-42"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs42
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 43 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs43:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount43A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs43
      SecurityGroups:
      - !Ref EfsSg43
      SubnetId: !Ref SubnetA

  Mount43B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs43
      SecurityGroups:
      - !Ref EfsSg43
      SubnetId: !Ref SubnetB

  EfsSg43:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-43"
      GroupDescription: !Sub "${AWS::StackName}-efs-43"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg43
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg43:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-43"
      GroupDescription: !Sub "${AWS::StackName}-ec2-43"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration43:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg43
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster43} >> /etc/ecs/ecs.config

  AutoScalingGroup43:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-43"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration43
      MaxSize: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster43:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-43"

  EcsService43:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster43
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState43, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-43"
      TaskDefinition: !Ref EcsTask43
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask43:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount43A
    - Mount43B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-43"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs43
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 44 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs44:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount44A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs44
      SecurityGroups:
      - !Ref EfsSg44
      SubnetId: !Ref SubnetA

  Mount44B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs44
      SecurityGroups:
      - !Ref EfsSg44
      SubnetId: !Ref SubnetB

  EfsSg44:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-44"
      GroupDescription: !Sub "${AWS::StackName}-efs-44"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg44
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg44:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-44"
      GroupDescription: !Sub "${AWS::StackName}-ec2-44"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration44:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg44
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster44} >> /etc/ecs/ecs.config

  AutoScalingGroup44:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-44"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration44
      MaxSize: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster44:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-44"

  EcsService44:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster44
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState44, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-44"
      TaskDefinition: !Ref EcsTask44
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask44:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount44A
    - Mount44B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-44"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs44
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 45 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs45:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount45A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs45
      SecurityGroups:
      - !Ref EfsSg45
      SubnetId: !Ref SubnetA

  Mount45B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs45
      SecurityGroups:
      - !Ref EfsSg45
      SubnetId: !Ref SubnetB

  EfsSg45:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-45"
      GroupDescription: !Sub "${AWS::StackName}-efs-45"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg45
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg45:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-45"
      GroupDescription: !Sub "${AWS::StackName}-ec2-45"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration45:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg45
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster45} >> /etc/ecs/ecs.config

  AutoScalingGroup45:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-45"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration45
      MaxSize: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster45:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-45"

  EcsService45:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster45
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState45, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-45"
      TaskDefinition: !Ref EcsTask45
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask45:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount45A
    - Mount45B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-45"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs45
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 46 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs46:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount46A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs46
      SecurityGroups:
      - !Ref EfsSg46
      SubnetId: !Ref SubnetA

  Mount46B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs46
      SecurityGroups:
      - !Ref EfsSg46
      SubnetId: !Ref SubnetB

  EfsSg46:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-46"
      GroupDescription: !Sub "${AWS::StackName}-efs-46"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg46
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg46:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-46"
      GroupDescription: !Sub "${AWS::StackName}-ec2-46"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration46:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg46
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster46} >> /etc/ecs/ecs.config

  AutoScalingGroup46:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-46"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration46
      MaxSize: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster46:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-46"

  EcsService46:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster46
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState46, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-46"
      TaskDefinition: !Ref EcsTask46
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask46:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount46A
    - Mount46B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-46"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs46
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 47 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs47:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount47A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs47
      SecurityGroups:
      - !Ref EfsSg47
      SubnetId: !Ref SubnetA

  Mount47B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs47
      SecurityGroups:
      - !Ref EfsSg47
      SubnetId: !Ref SubnetB

  EfsSg47:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-47"
      GroupDescription: !Sub "${AWS::StackName}-efs-47"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg47
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg47:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-47"
      GroupDescription: !Sub "${AWS::StackName}-ec2-47"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration47:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg47
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster47} >> /etc/ecs/ecs.config

  AutoScalingGroup47:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-47"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration47
      MaxSize: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster47:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-47"

  EcsService47:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster47
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState47, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-47"
      TaskDefinition: !Ref EcsTask47
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask47:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount47A
    - Mount47B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-47"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs47
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 48 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs48:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount48A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs48
      SecurityGroups:
      - !Ref EfsSg48
      SubnetId: !Ref SubnetA

  Mount48B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs48
      SecurityGroups:
      - !Ref EfsSg48
      SubnetId: !Ref SubnetB

  EfsSg48:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-48"
      GroupDescription: !Sub "${AWS::StackName}-efs-48"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg48
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg48:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-48"
      GroupDescription: !Sub "${AWS::StackName}-ec2-48"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration48:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg48
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster48} >> /etc/ecs/ecs.config

  AutoScalingGroup48:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-48"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration48
      MaxSize: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster48:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-48"

  EcsService48:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster48
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState48, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-48"
      TaskDefinition: !Ref EcsTask48
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask48:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount48A
    - Mount48B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-48"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs48
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 49 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs49:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount49A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs49
      SecurityGroups:
      - !Ref EfsSg49
      SubnetId: !Ref SubnetA

  Mount49B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs49
      SecurityGroups:
      - !Ref EfsSg49
      SubnetId: !Ref SubnetB

  EfsSg49:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-49"
      GroupDescription: !Sub "${AWS::StackName}-efs-49"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg49
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg49:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-49"
      GroupDescription: !Sub "${AWS::StackName}-ec2-49"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration49:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg49
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster49} >> /etc/ecs/ecs.config

  AutoScalingGroup49:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-49"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration49
      MaxSize: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster49:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-49"

  EcsService49:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster49
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState49, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-49"
      TaskDefinition: !Ref EcsTask49
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask49:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount49A
    - Mount49B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-49"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs49
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 50 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs50:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount50A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs50
      SecurityGroups:
      - !Ref EfsSg50
      SubnetId: !Ref SubnetA

  Mount50B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs50
      SecurityGroups:
      - !Ref EfsSg50
      SubnetId: !Ref SubnetB

  EfsSg50:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-50"
      GroupDescription: !Sub "${AWS::StackName}-efs-50"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg50
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg50:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-50"
      GroupDescription: !Sub "${AWS::StackName}-ec2-50"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration50:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg50
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster50} >> /etc/ecs/ecs.config

  AutoScalingGroup50:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-50"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration50
      MaxSize: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster50:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-50"

  EcsService50:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster50
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState50, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-50"
      TaskDefinition: !Ref EcsTask50
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask50:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount50A
    - Mount50B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-50"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs50
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 51 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs51:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount51A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs51
      SecurityGroups:
      - !Ref EfsSg51
      SubnetId: !Ref SubnetA

  Mount51B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs51
      SecurityGroups:
      - !Ref EfsSg51
      SubnetId: !Ref SubnetB

  EfsSg51:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-51"
      GroupDescription: !Sub "${AWS::StackName}-efs-51"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg51
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg51:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-51"
      GroupDescription: !Sub "${AWS::StackName}-ec2-51"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration51:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg51
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster51} >> /etc/ecs/ecs.config

  AutoScalingGroup51:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-51"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState51, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration51
      MaxSize: !FindInMap [ ServerState, !Ref ServerState51, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState51, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster51:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-51"

  EcsService51:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster51
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState51, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-51"
      TaskDefinition: !Ref EcsTask51
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask51:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount51A
    - Mount51B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-51"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs51
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 52 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs52:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount52A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs52
      SecurityGroups:
      - !Ref EfsSg52
      SubnetId: !Ref SubnetA

  Mount52B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs52
      SecurityGroups:
      - !Ref EfsSg52
      SubnetId: !Ref SubnetB

  EfsSg52:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-52"
      GroupDescription: !Sub "${AWS::StackName}-efs-52"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg52
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg52:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-52"
      GroupDescription: !Sub "${AWS::StackName}-ec2-52"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration52:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg52
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster52} >> /etc/ecs/ecs.config

  AutoScalingGroup52:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-52"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState52, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration52
      MaxSize: !FindInMap [ ServerState, !Ref ServerState52, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState52, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster52:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-52"

  EcsService52:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster52
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState52, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-52"
      TaskDefinition: !Ref EcsTask52
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask52:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount52A
    - Mount52B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-52"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs52
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 53 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs53:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount53A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs53
      SecurityGroups:
      - !Ref EfsSg53
      SubnetId: !Ref SubnetA

  Mount53B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs53
      SecurityGroups:
      - !Ref EfsSg53
      SubnetId: !Ref SubnetB

  EfsSg53:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-53"
      GroupDescription: !Sub "${AWS::StackName}-efs-53"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg53
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg53:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-53"
      GroupDescription: !Sub "${AWS::StackName}-ec2-53"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration53:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg53
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster53} >> /etc/ecs/ecs.config

  AutoScalingGroup53:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-53"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState53, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration53
      MaxSize: !FindInMap [ ServerState, !Ref ServerState53, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState53, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster53:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-53"

  EcsService53:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster53
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState53, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-53"
      TaskDefinition: !Ref EcsTask53
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask53:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount53A
    - Mount53B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-53"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs53
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 54 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs54:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount54A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs54
      SecurityGroups:
      - !Ref EfsSg54
      SubnetId: !Ref SubnetA

  Mount54B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs54
      SecurityGroups:
      - !Ref EfsSg54
      SubnetId: !Ref SubnetB

  EfsSg54:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-54"
      GroupDescription: !Sub "${AWS::StackName}-efs-54"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg54
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg54:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-54"
      GroupDescription: !Sub "${AWS::StackName}-ec2-54"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration54:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg54
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster54} >> /etc/ecs/ecs.config

  AutoScalingGroup54:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-54"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState54, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration54
      MaxSize: !FindInMap [ ServerState, !Ref ServerState54, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState54, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster54:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-54"

  EcsService54:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster54
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState54, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-54"
      TaskDefinition: !Ref EcsTask54
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask54:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount54A
    - Mount54B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-54"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs54
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 55 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs55:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount55A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs55
      SecurityGroups:
      - !Ref EfsSg55
      SubnetId: !Ref SubnetA

  Mount55B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs55
      SecurityGroups:
      - !Ref EfsSg55
      SubnetId: !Ref SubnetB

  EfsSg55:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-55"
      GroupDescription: !Sub "${AWS::StackName}-efs-55"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg55
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg55:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-55"
      GroupDescription: !Sub "${AWS::StackName}-ec2-55"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration55:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg55
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster55} >> /etc/ecs/ecs.config

  AutoScalingGroup55:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-55"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState55, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration55
      MaxSize: !FindInMap [ ServerState, !Ref ServerState55, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState55, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster55:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-55"

  EcsService55:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster55
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState55, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-55"
      TaskDefinition: !Ref EcsTask55
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask55:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount55A
    - Mount55B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-55"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs55
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 56 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs56:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount56A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs56
      SecurityGroups:
      - !Ref EfsSg56
      SubnetId: !Ref SubnetA

  Mount56B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs56
      SecurityGroups:
      - !Ref EfsSg56
      SubnetId: !Ref SubnetB

  EfsSg56:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-56"
      GroupDescription: !Sub "${AWS::StackName}-efs-56"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg56
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg56:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-56"
      GroupDescription: !Sub "${AWS::StackName}-ec2-56"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration56:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg56
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster56} >> /etc/ecs/ecs.config

  AutoScalingGroup56:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-56"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState56, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration56
      MaxSize: !FindInMap [ ServerState, !Ref ServerState56, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState56, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster56:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-56"

  EcsService56:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster56
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState56, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-56"
      TaskDefinition: !Ref EcsTask56
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask56:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount56A
    - Mount56B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-56"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs56
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 57 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs57:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount57A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs57
      SecurityGroups:
      - !Ref EfsSg57
      SubnetId: !Ref SubnetA

  Mount57B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs57
      SecurityGroups:
      - !Ref EfsSg57
      SubnetId: !Ref SubnetB

  EfsSg57:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-57"
      GroupDescription: !Sub "${AWS::StackName}-efs-57"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg57
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg57:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-57"
      GroupDescription: !Sub "${AWS::StackName}-ec2-57"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration57:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg57
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster57} >> /etc/ecs/ecs.config

  AutoScalingGroup57:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-57"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState57, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration57
      MaxSize: !FindInMap [ ServerState, !Ref ServerState57, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState57, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster57:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-57"

  EcsService57:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster57
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState57, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-57"
      TaskDefinition: !Ref EcsTask57
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask57:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount57A
    - Mount57B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-57"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs57
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 58 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs58:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount58A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs58
      SecurityGroups:
      - !Ref EfsSg58
      SubnetId: !Ref SubnetA

  Mount58B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs58
      SecurityGroups:
      - !Ref EfsSg58
      SubnetId: !Ref SubnetB

  EfsSg58:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-58"
      GroupDescription: !Sub "${AWS::StackName}-efs-58"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg58
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg58:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-58"
      GroupDescription: !Sub "${AWS::StackName}-ec2-58"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration58:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg58
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster58} >> /etc/ecs/ecs.config

  AutoScalingGroup58:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-58"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState58, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration58
      MaxSize: !FindInMap [ ServerState, !Ref ServerState58, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState58, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster58:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-58"

  EcsService58:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster58
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState58, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-58"
      TaskDefinition: !Ref EcsTask58
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask58:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount58A
    - Mount58B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-58"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs58
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 59 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs59:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount59A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs59
      SecurityGroups:
      - !Ref EfsSg59
      SubnetId: !Ref SubnetA

  Mount59B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs59
      SecurityGroups:
      - !Ref EfsSg59
      SubnetId: !Ref SubnetB

  EfsSg59:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-59"
      GroupDescription: !Sub "${AWS::StackName}-efs-59"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg59
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg59:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-59"
      GroupDescription: !Sub "${AWS::StackName}-ec2-59"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration59:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg59
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster59} >> /etc/ecs/ecs.config

  AutoScalingGroup59:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-59"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState59, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration59
      MaxSize: !FindInMap [ ServerState, !Ref ServerState59, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState59, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster59:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-59"

  EcsService59:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster59
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState59, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-59"
      TaskDefinition: !Ref EcsTask59
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask59:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount59A
    - Mount59B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-59"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs59
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # 60 - EFS FOR PERSISTENT DATA
  # ====================================================

  Efs60:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    Properties:
      LifecyclePolicies:
      - TransitionToIA: AFTER_7_DAYS
      - TransitionToPrimaryStorageClass: AFTER_1_ACCESS

  Mount60A:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs60
      SecurityGroups:
      - !Ref EfsSg60
      SubnetId: !Ref SubnetA

  Mount60B:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref Efs60
      SecurityGroups:
      - !Ref EfsSg60
      SubnetId: !Ref SubnetB

  EfsSg60:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-60"
      GroupDescription: !Sub "${AWS::StackName}-efs-60"
      SecurityGroupIngress:
      - FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref Ec2Sg60
      VpcId: !Ref Vpc

  # ====================================================
  # INSTANCE CONFIG - 60
  # ====================================================

  Ec2Sg60:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-ec2-60"
      GroupDescription: !Sub "${AWS::StackName}-ec2-60"
      SecurityGroupIngress:
      - !If
        - IpAddressProvided
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Sub "${YourIp}/32"
        - !Ref 'AWS::NoValue'
      - FromPort: 34197
        ToPort: 34197
        IpProtocol: udp
        CidrIp: 0.0.0.0/0
      - !If
        - DoEnableRcon
        - FromPort: 27015
          ToPort: 27015
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - !Ref 'AWS::NoValue'
      VpcId: !Ref Vpc

  LaunchConfiguration60:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName:
        !If [ KeyPairNameProvided, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      SecurityGroups:
      - !Ref Ec2Sg60
      SpotPrice: !If [ SpotPriceProvided, !Ref SpotPrice, !Ref 'AWS::NoValue' ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${EcsCluster60} >> /etc/ecs/ecs.config

  AutoScalingGroup60:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-asg-60"
      DesiredCapacity: !FindInMap [ ServerState, !Ref ServerState60, DesiredCapacity ]
      LaunchConfigurationName: !Ref LaunchConfiguration60
      MaxSize: !FindInMap [ ServerState, !Ref ServerState60, DesiredCapacity ]
      MinSize: !FindInMap [ ServerState, !Ref ServerState60, DesiredCapacity ]
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB

  EcsCluster60:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "-cluster-60"

  EcsService60:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster60
      DesiredCount: !FindInMap [ ServerState, !Ref ServerState60, DesiredCapacity ]
      ServiceName: !Sub "${AWS::StackName}-ecs-service-60"
      TaskDefinition: !Ref EcsTask60
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  EcsTask60:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Mount60A
    - Mount60B
    Properties:
      Volumes:
      - Name: !Sub "${AWS::StackName}-factorio-60"
        EFSVolumeConfiguration:
          FilesystemId: !Ref Efs60
          TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: factorio
          MemoryReservation: 1024
          Image: !Sub "factoriotools/factorio:${FactorioImageTag}"
          PortMappings:
          - ContainerPort: 34197
            HostPort: 34197
            Protocol: udp
          - ContainerPort: 27015
            HostPort: 27015
            Protocol: tcp
          MountPoints:
          - ContainerPath: /factorio
            SourceVolume: factorio
            ReadOnly: false
          Environment:
          - Name: UPDATE_MODS_ON_START
            Value: !Sub "${UpdateModsOnStart}"

  # ====================================================
  # SET DNS RECORD - For all ASGs and EC2 instances
  # ====================================================

  SetDNSRecordLambdaRole:
    Type: AWS::IAM::Role
    Condition: DnsConfigEnabled
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "route53:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "ec2:DescribeInstance*"
                Resource: "*"

  SetDNSRecordLambda:
    Type: "AWS::Lambda::Function"
    Condition: DnsConfigEnabled
    Properties:
      Environment:
        Variables:
          HostedZoneId: !Ref HostedZoneId
          ASGRecordMap: !Join [",", [
            !Sub "${AutoScalingGroup1}:${RecordName1}",
            !Sub "${AutoScalingGroup2}:${RecordName2}",
            !Sub "${AutoScalingGroup3}:${RecordName3}",
            !Sub "${AutoScalingGroup4}:${RecordName4}",
            !Sub "${AutoScalingGroup5}:${RecordName5}",
            !Sub "${AutoScalingGroup6}:${RecordName6}",
            !Sub "${AutoScalingGroup7}:${RecordName7}",
            !Sub "${AutoScalingGroup8}:${RecordName8}",
            !Sub "${AutoScalingGroup9}:${RecordName9}",
            !Sub "${AutoScalingGroup10}:${RecordName10}",
            !Sub "${AutoScalingGroup11}:${RecordName11}",
            !Sub "${AutoScalingGroup12}:${RecordName12}",
            !Sub "${AutoScalingGroup13}:${RecordName13}",
            !Sub "${AutoScalingGroup14}:${RecordName14}",
            !Sub "${AutoScalingGroup15}:${RecordName15}",
            !Sub "${AutoScalingGroup16}:${RecordName16}",
            !Sub "${AutoScalingGroup17}:${RecordName17}",
            !Sub "${AutoScalingGroup18}:${RecordName18}",
            !Sub "${AutoScalingGroup19}:${RecordName19}",
            !Sub "${AutoScalingGroup20}:${RecordName20}",
            !Sub "${AutoScalingGroup21}:${RecordName21}",
            !Sub "${AutoScalingGroup22}:${RecordName22}",
            !Sub "${AutoScalingGroup23}:${RecordName23}",
            !Sub "${AutoScalingGroup24}:${RecordName24}",
            !Sub "${AutoScalingGroup25}:${RecordName25}",
            !Sub "${AutoScalingGroup26}:${RecordName26}",
            !Sub "${AutoScalingGroup27}:${RecordName27}",
            !Sub "${AutoScalingGroup28}:${RecordName28}",
            !Sub "${AutoScalingGroup29}:${RecordName29}",
            !Sub "${AutoScalingGroup30}:${RecordName30}",
            !Sub "${AutoScalingGroup31}:${RecordName31}",
            !Sub "${AutoScalingGroup32}:${RecordName32}",
            !Sub "${AutoScalingGroup33}:${RecordName33}",
            !Sub "${AutoScalingGroup34}:${RecordName34}",
            !Sub "${AutoScalingGroup35}:${RecordName35}",
            !Sub "${AutoScalingGroup36}:${RecordName36}",
            !Sub "${AutoScalingGroup37}:${RecordName37}",
            !Sub "${AutoScalingGroup38}:${RecordName38}",
            !Sub "${AutoScalingGroup39}:${RecordName39}",
            !Sub "${AutoScalingGroup40}:${RecordName40}",
            !Sub "${AutoScalingGroup41}:${RecordName41}",
            !Sub "${AutoScalingGroup42}:${RecordName42}",
            !Sub "${AutoScalingGroup43}:${RecordName43}",
            !Sub "${AutoScalingGroup44}:${RecordName44}",
            !Sub "${AutoScalingGroup45}:${RecordName45}",
            !Sub "${AutoScalingGroup46}:${RecordName46}",
            !Sub "${AutoScalingGroup47}:${RecordName47}",
            !Sub "${AutoScalingGroup48}:${RecordName48}",
            !Sub "${AutoScalingGroup49}:${RecordName49}",
            !Sub "${AutoScalingGroup50}:${RecordName50}",
            !Sub "${AutoScalingGroup51}:${RecordName51}",
            !Sub "${AutoScalingGroup52}:${RecordName52}",
            !Sub "${AutoScalingGroup53}:${RecordName53}",
            !Sub "${AutoScalingGroup54}:${RecordName54}",
            !Sub "${AutoScalingGroup55}:${RecordName55}",
            !Sub "${AutoScalingGroup56}:${RecordName56}",
            !Sub "${AutoScalingGroup57}:${RecordName57}",
            !Sub "${AutoScalingGroup58}:${RecordName58}",
            !Sub "${AutoScalingGroup59}:${RecordName59}",
            !Sub "${AutoScalingGroup60}:${RecordName60}",
          ]]
      Code:
        ZipFile: |
          import boto3
          import os

          def handler(event, context):
            asg_name = event['detail']['AutoScalingGroupName']

            # Parse the ASG to record name mapping
            asg_record_map = dict(item.split(':') for item in os.environ['ASGRecordMap'].split(','))

            # Get the record name for the current ASG
            record_name = asg_record_map.get(asg_name)
            if not record_name:
              raise ValueError(f"No record name mapping found for ASG: {asg_name}")

            new_instance = boto3.resource('ec2').Instance(event['detail']['EC2InstanceId'])
            boto3.client('route53').change_resource_record_sets(
              HostedZoneId= os.environ['HostedZoneId'],
              ChangeBatch={
                  'Comment': f'Updating DNS for {asg_name}',
                  'Changes': [
                      {
                          'Action': 'UPSERT',
                          'ResourceRecordSet': {
                              'Name': record_name,
                              'Type': 'A',
                              'TTL': 60,
                              'ResourceRecords': [
                                  {
                                      'Value': new_instance.public_ip_address
                                  },
                              ]
                          }
                      },
                  ]
              })
      Description: Sets Route 53 DNS Record based on ASG name
      FunctionName: !Sub "-set-dns"
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SetDNSRecordLambdaRole.Arn
      Runtime: python3.12
      Timeout: 20

  LaunchEvent:
    Type: AWS::Events::Rule
    Condition: DnsConfigEnabled
    Properties:
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - EC2 Instance Launch Successful
        detail:
          AutoScalingGroupName:
          - !Ref AutoScalingGroup1
          - !Ref AutoScalingGroup2
          - !Ref AutoScalingGroup3
          - !Ref AutoScalingGroup4
          - !Ref AutoScalingGroup5
          - !Ref AutoScalingGroup6
          - !Ref AutoScalingGroup7
          - !Ref AutoScalingGroup8
          - !Ref AutoScalingGroup9
          - !Ref AutoScalingGroup10
          - !Ref AutoScalingGroup11
          - !Ref AutoScalingGroup12
          - !Ref AutoScalingGroup13
          - !Ref AutoScalingGroup14
          - !Ref AutoScalingGroup15
          - !Ref AutoScalingGroup16
          - !Ref AutoScalingGroup17
          - !Ref AutoScalingGroup18
          - !Ref AutoScalingGroup19
          - !Ref AutoScalingGroup20
          - !Ref AutoScalingGroup21
          - !Ref AutoScalingGroup22
          - !Ref AutoScalingGroup23
          - !Ref AutoScalingGroup24
          - !Ref AutoScalingGroup25
          - !Ref AutoScalingGroup26
          - !Ref AutoScalingGroup27
          - !Ref AutoScalingGroup28
          - !Ref AutoScalingGroup29
          - !Ref AutoScalingGroup30
          - !Ref AutoScalingGroup31
          - !Ref AutoScalingGroup32
          - !Ref AutoScalingGroup33
          - !Ref AutoScalingGroup34
          - !Ref AutoScalingGroup35
          - !Ref AutoScalingGroup36
          - !Ref AutoScalingGroup37
          - !Ref AutoScalingGroup38
          - !Ref AutoScalingGroup39
          - !Ref AutoScalingGroup40
          - !Ref AutoScalingGroup41
          - !Ref AutoScalingGroup42
          - !Ref AutoScalingGroup43
          - !Ref AutoScalingGroup44
          - !Ref AutoScalingGroup45
          - !Ref AutoScalingGroup46
          - !Ref AutoScalingGroup47
          - !Ref AutoScalingGroup48
          - !Ref AutoScalingGroup49
          - !Ref AutoScalingGroup50
          - !Ref AutoScalingGroup51
          - !Ref AutoScalingGroup52
          - !Ref AutoScalingGroup53
          - !Ref AutoScalingGroup54
          - !Ref AutoScalingGroup55
          - !Ref AutoScalingGroup56
          - !Ref AutoScalingGroup57
          - !Ref AutoScalingGroup58
          - !Ref AutoScalingGroup59
          - !Ref AutoScalingGroup60
      Name: !Sub "-instance-launch"
      State: ENABLED
      Targets:
        - Arn: !GetAtt SetDNSRecordLambda.Arn
          Id: !Sub "-set-dns"

  LaunchEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: DnsConfigEnabled
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetDNSRecordLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LaunchEvent.Arn
